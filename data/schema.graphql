type Query {
  demoUser: DemoUser

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type DemoUser {
  """The ID of an object"""
  id: ID!
  userId: String!
  username: String!
  password: String!
  email: String!
  gender: GenderEnum!
  pizzaTopping: PizzaToppingEnum!
  age: Int!
}

enum GenderEnum {
  NON_BINARY
  FEMALE
  MALE
}

enum PizzaToppingEnum {
  BUFFALO_CHICKEN
  PEPPERONI
  MEATLOVERS
  EGGPLANT_PARM
  OLIVES
  HAWAIIAN
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type Mutation {
  addUser(input: AddUserInput!): AddUserPayload
}

type AddUserPayload {
  userId: String!
  username: String!
  password: String!
  email: String!
  gender: GenderEnum!
  pizzaTopping: PizzaToppingEnum!
  age: Int!
  clientMutationId: String
}

input AddUserInput {
  username: String!
  password: String!
  email: String!
  gender: GenderEnum!
  pizzaTopping: PizzaToppingEnum!
  age: Int!
  clientMutationId: String
}
